package rag

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// EmbeddingService defines the interface for generating embeddings
type EmbeddingService interface {
	// GenerateEmbedding generates an embedding vector for the given text
	GenerateEmbedding(ctx context.Context, text string) ([]float64, error)
	
	// GenerateEmbeddings generates embeddings for multiple texts
	GenerateEmbeddings(ctx context.Context, texts []string) ([][]float64, error)
	
	// GetDimension returns the dimension of embeddings generated by this service
	GetDimension() int
	
	// GetModel returns the model name used for embeddings
	GetModel() string
}

// OllamaEmbeddingService implements EmbeddingService using OLAMA
type OllamaEmbeddingService struct {
	baseURL    string
	model      string
	httpClient *http.Client
	dimension  int
	tracer     trace.Tracer
}

// EmbeddingRequest represents a request to OLAMA embedding API
type EmbeddingRequest struct {
	Model  string `json:"model"`
	Prompt string `json:"prompt"`
}

// EmbeddingResponse represents a response from OLAMA embedding API
type EmbeddingResponse struct {
	Embedding []float64 `json:"embedding"`
}

// NewOllamaEmbeddingService creates a new OLAMA embedding service
func NewOllamaEmbeddingService(baseURL, model string) *OllamaEmbeddingService {
	return &OllamaEmbeddingService{
		baseURL: baseURL,
		model:   model,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
		dimension: 0, // Will be determined from first response
		tracer:    otel.Tracer("rag.embedding"),
	}
}

// GenerateEmbedding generates an embedding vector for the given text
func (es *OllamaEmbeddingService) GenerateEmbedding(ctx context.Context, text string) ([]float64, error) {
	ctx, span := es.tracer.Start(ctx, "ollama_embedding.generate")
	defer span.End()

	span.SetAttributes(
		attribute.String("embedding.model", es.model),
		attribute.Int("text.length", len(text)),
	)

	// Prepare request
	reqBody := EmbeddingRequest{
		Model:  es.model,
		Prompt: text,
	}

	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		span.RecordError(err)
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	// Make HTTP request
	url := fmt.Sprintf("%s/api/embeddings", es.baseURL)
	req, err := http.NewRequestWithContext(ctx, "POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		span.RecordError(err)
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := es.httpClient.Do(req)
	if err != nil {
		span.RecordError(err)
		return nil, fmt.Errorf("failed to make request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		err := fmt.Errorf("OLAMA API error: %d - %s", resp.StatusCode, string(body))
		span.RecordError(err)
		return nil, err
	}

	// Parse response
	var embeddingResp EmbeddingResponse
	if err := json.NewDecoder(resp.Body).Decode(&embeddingResp); err != nil {
		span.RecordError(err)
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	// Set dimension if not already set
	if es.dimension == 0 {
		es.dimension = len(embeddingResp.Embedding)
	}

	span.SetAttributes(
		attribute.Int("embedding.dimension", len(embeddingResp.Embedding)),
		attribute.Bool("embedding.success", true),
	)

	return embeddingResp.Embedding, nil
}

// GenerateEmbeddings generates embeddings for multiple texts
func (es *OllamaEmbeddingService) GenerateEmbeddings(ctx context.Context, texts []string) ([][]float64, error) {
	ctx, span := es.tracer.Start(ctx, "ollama_embedding.generate_batch")
	defer span.End()

	span.SetAttributes(
		attribute.String("embedding.model", es.model),
		attribute.Int("texts.count", len(texts)),
	)

	embeddings := make([][]float64, len(texts))

	for i, text := range texts {
		embedding, err := es.GenerateEmbedding(ctx, text)
		if err != nil {
			span.RecordError(err)
			return nil, fmt.Errorf("failed to generate embedding for text %d: %w", i, err)
		}
		embeddings[i] = embedding
	}

	return embeddings, nil
}

// GetDimension returns the dimension of embeddings generated by this service
func (es *OllamaEmbeddingService) GetDimension() int {
	return es.dimension
}

// GetModel returns the model name used for embeddings
func (es *OllamaEmbeddingService) GetModel() string {
	return es.model
}

// MockEmbeddingService implements EmbeddingService for testing
type MockEmbeddingService struct {
	dimension int
	model     string
}

// NewMockEmbeddingService creates a new mock embedding service
func NewMockEmbeddingService(dimension int, model string) *MockEmbeddingService {
	return &MockEmbeddingService{
		dimension: dimension,
		model:     model,
	}
}

// GenerateEmbedding generates a mock embedding vector
func (mes *MockEmbeddingService) GenerateEmbedding(ctx context.Context, text string) ([]float64, error) {
	// Generate a deterministic but varied embedding based on text content
	embedding := make([]float64, mes.dimension)
	
	// Simple hash-based approach for consistent mock embeddings
	hash := 0
	for _, char := range text {
		hash = hash*31 + int(char)
	}
	
	for i := range embedding {
		// Create varied values between -1 and 1
		hash = hash*1103515245 + 12345 // Linear congruential generator
		embedding[i] = float64((hash%2000)-1000) / 1000.0
	}
	
	// Normalize the vector
	var norm float64
	for _, val := range embedding {
		norm += val * val
	}
	norm = 1.0 / (norm + 1e-8) // Add small epsilon to avoid division by zero
	
	for i := range embedding {
		embedding[i] *= norm
	}
	
	return embedding, nil
}

// GenerateEmbeddings generates mock embeddings for multiple texts
func (mes *MockEmbeddingService) GenerateEmbeddings(ctx context.Context, texts []string) ([][]float64, error) {
	embeddings := make([][]float64, len(texts))
	
	for i, text := range texts {
		embedding, err := mes.GenerateEmbedding(ctx, text)
		if err != nil {
			return nil, err
		}
		embeddings[i] = embedding
	}
	
	return embeddings, nil
}

// GetDimension returns the dimension of mock embeddings
func (mes *MockEmbeddingService) GetDimension() int {
	return mes.dimension
}

// GetModel returns the mock model name
func (mes *MockEmbeddingService) GetModel() string {
	return mes.model
}

// EmbeddingConfig represents configuration for embedding services
type EmbeddingConfig struct {
	Provider string `json:"provider"` // "ollama", "mock"
	Model    string `json:"model"`
	BaseURL  string `json:"base_url"`
	Timeout  time.Duration `json:"timeout"`
}

// NewEmbeddingService creates a new embedding service based on configuration
func NewEmbeddingService(config *EmbeddingConfig) (EmbeddingService, error) {
	switch config.Provider {
	case "ollama":
		if config.BaseURL == "" {
			config.BaseURL = "http://localhost:11434"
		}
		if config.Model == "" {
			config.Model = "nomic-embed-text" // Default embedding model
		}
		return NewOllamaEmbeddingService(config.BaseURL, config.Model), nil
		
	case "mock":
		dimension := 384 // Common embedding dimension
		if config.Model == "" {
			config.Model = "mock-embedding-model"
		}
		return NewMockEmbeddingService(dimension, config.Model), nil
		
	default:
		return nil, fmt.Errorf("unsupported embedding provider: %s", config.Provider)
	}
}

// EmbeddingBatch represents a batch of texts to be embedded
type EmbeddingBatch struct {
	Texts     []string `json:"texts"`
	BatchSize int      `json:"batch_size"`
}

// BatchEmbeddingService wraps an EmbeddingService to provide batching capabilities
type BatchEmbeddingService struct {
	service   EmbeddingService
	batchSize int
	tracer    trace.Tracer
}

// NewBatchEmbeddingService creates a new batch embedding service
func NewBatchEmbeddingService(service EmbeddingService, batchSize int) *BatchEmbeddingService {
	if batchSize <= 0 {
		batchSize = 10 // Default batch size
	}
	
	return &BatchEmbeddingService{
		service:   service,
		batchSize: batchSize,
		tracer:    otel.Tracer("rag.batch_embedding"),
	}
}

// GenerateEmbeddings generates embeddings in batches
func (bes *BatchEmbeddingService) GenerateEmbeddings(ctx context.Context, texts []string) ([][]float64, error) {
	ctx, span := bes.tracer.Start(ctx, "batch_embedding.generate")
	defer span.End()

	span.SetAttributes(
		attribute.Int("texts.total", len(texts)),
		attribute.Int("batch.size", bes.batchSize),
	)

	var allEmbeddings [][]float64

	for i := 0; i < len(texts); i += bes.batchSize {
		end := i + bes.batchSize
		if end > len(texts) {
			end = len(texts)
		}

		batch := texts[i:end]
		embeddings, err := bes.service.GenerateEmbeddings(ctx, batch)
		if err != nil {
			span.RecordError(err)
			return nil, fmt.Errorf("failed to generate embeddings for batch %d-%d: %w", i, end, err)
		}

		allEmbeddings = append(allEmbeddings, embeddings...)
	}

	span.SetAttributes(attribute.Int("embeddings.generated", len(allEmbeddings)))
	return allEmbeddings, nil
}

// GenerateEmbedding generates a single embedding
func (bes *BatchEmbeddingService) GenerateEmbedding(ctx context.Context, text string) ([]float64, error) {
	return bes.service.GenerateEmbedding(ctx, text)
}

// GetDimension returns the embedding dimension
func (bes *BatchEmbeddingService) GetDimension() int {
	return bes.service.GetDimension()
}

// GetModel returns the model name
func (bes *BatchEmbeddingService) GetModel() string {
	return bes.service.GetModel()
}
